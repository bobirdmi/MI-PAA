====== Zpráva k 5. úloze ======
===== Specifikace =====
==== Úloha ====
Lze přečíst [[homeworks:05:start|zde]].

==== Hardware & Software ====
Notebook s:
  * Hardware
    * Windows 8.1 64-bit
    * Intel Core i7-3630QM 
    * 8GB RAM
  * Software
    * Jupyter Notebook s python 3.5
    * vlastní modul [[https://github.com/bobirdmi/genetic-algorithms|geneticalgs]]

==== Použitý modul ====
V dané praci byl využít vlastní pythonní modul [[https://github.com/bobirdmi/genetic-algorithms|geneticalgs]] verze **1.0**.

===== Zkušební instance =====
**Řešitelné** zkušební instance (uf*) byly převzaty z [[http://www.cs.ubc.ca/~hoos/SATLIB/benchm.html|]], jejich váhy byly náhodně vygenerovany. Tyto instance byly zdola oříznuty, aby poměr //počet klauzulí k počtu proměnných// byl **roven 4**. Pro nastavení parametrů genetického algoritmů byla použita instance //uf50-218//, která po oříznutí má 200 prvních klauzulí.

===== Měření "výkonu" zvolené sady parametrů =====
"Výkon" aktuálně testované sady parametrů je vypočítán podle počtu **různých** nalezených řešení //F(Y)=1//. Jelikož se jedná o nedeterministický algoritmus, bude spočítán **průměr** tohoto počtu na základě 10 měřění (větší počet měření by byl příliš časově náročný).

===== Nastavení parametrů =====
Genetické algoritmy (GA) jsou velmi závislé na definovaném problému. Proto je nutné správně přizpůsobit parametry GA zvolenému problému **3SAT**. Tedy musíme experimentálním způsobem stanovit následující parametry:
  * druh selekce rodičů
  * velikost počateční populace
  * druh a pravděpodobnost mutace
  * druh a pravděpodobnost křížení

Některé parametry jako //elitismus// a //minimalizace/maximalizace fitness// lze stanovit i bez dalších experimentů (v případě druhu optimalizace to záleží na přístupu k řešení). //Elitismus// bude **stále zapnutý**, jelikož ovlivňuje pouze rychlost konvergence, nic víc.

Pro potřeby experimentů defaultní hodnoty parametrů byly zafixované na následující hodnoty:
  * selekce = //rank//
  * pravděpodobnost mutace = 0%
  * druh mutace = jednobodová
  * pravděpodobnost křížení = 100%
  * druh křížení = jednobodové
  * počet generací = 20
  * velikost počateční populace = 1000

==== Optimalizační kritérium ====
GA se bude snažit **maximalizovat** počet splněných klauzulí (optimální počet klauzulí je fixní), a když nějaké řešení dosáhne optima, k jeho hodnotě //fitness// (optimální počet klauzulí) se připočte celková váha tohoto řešení. Toutou fintou docilíme toho, že GA stále hledá řešení //F(Y)=1//, ale také již nalezená řešení navzájem soupeří podle svých váh.

==== Mutace ====
=== Pravděpodobnost mutace ===
Doporučená pravděpodobnost mutace je 0.5-1% (Beasley, 1993). Podle tohoto doporučení a selského rozumu vyplývá, že má smysl pouze testování malé pravděpodobnosti mutace, protože s větší pravděpodobností přichází úplná náhodnost algoritmu.

Pro testování použijeme následující pravděpodobnosti: 1%, 5%, 10%, 15%, 20%. Tabulka níže obsahuje průměrný počet různých nalezených řešení pro každou testovanou hodnotu. Tučně jsou označeny nejlepší výsledky.

^  # generací = 20  ^^^^^^^
|  ^  1%  ^  5%  ^  10%  ^  15%  ^  20%  ^
^ # řešení |  **1.9**  |  0.8  |  1.0  |  **2.9**  |  1.2  |

Pro ověření a upřesnění otestujeme hodnoty kolem těchto výsledků

^  # generací = 20  ^^^^^^^
|  |  0.8%  |  1%  |  1.2%  |  13%  |  15%  |  17%  |
^ # řešení |  1.2  |  **6.3**  |  0.8  |  0.2  |  **2.9**  |  **3.0**  |

Dostali jsme nové potenciální hodnoty, proto spustíme algoritmus ještě jednou

^  # generací = 20  ^^^^^^^
|  ^  1%  ^  15%  ^  16%  ^  17%  ^  18%  ^
^ # řešení |  **4.4**  |  0.3  |  0.4  |  1.5  |  **2.0**  |

Z výsledků lze odvodit, že **nejvyhovující pravděpodobnost mutace je 1%**.

=== Druh mutace ===
Druh mutace určuje kolik náhodných bitů bude s danou pravděpodobností invertovány. Zase jako v případě pravděpodobnosti mutace má smysl testování pouze malých hodnot. Otestujeme následující hodnoty: 1, 2, 4, 6, 8, 10.

^  # generací = 20  ^^^^^^^
|  ^  1  ^  2  ^  4  ^  6  ^  8  ^  10  ^
^ # řešení |  **6.1**  |  1.4  |  3.1  |  **3.7**  |  2.5  |  0.4  |

Ověříme víteze a otestujeme jejich okolní hodnoty

^  # generací = 20  ^^^^^
|  ^  1  ^  5  ^  6  ^  7  ^
^ # řešení 1 |  **3.3**  |  1.0  |  1.8  |  **4.1**  |
^ # řešení 2 |  2.1  |  **7.6**  |  0.9  |  **2.9**  |
^ # řešení 3 |  **5.5**  |  1.6  |  **2.8**  |  1.9  |

Z naměřených výsledků lze vidět, že **nejvyhovující druh mutace je jednabodová mutace**.


==== Křížení ====
=== Pravděpodobnost křížení ===
Doporučená pravděpodobnost křížení je 80-95% (Beasley, 1993). Pomocí selského rozumu také lze usoudit, že malá pravděpodobnost křížení snižuje rychlost konvergence a v případě velmi malé hodnoty vůbec zastaví genetický algoritmus. Avšak pravděpodobnost 100% taky není dobrá, jelikož //vždy// ztrácíme rodiče bez jistoty objevu lepšího potomka (algoritmus by měl zachovat "náhodnost" a tím i divergenci populace). Proto byly testovány následující hodnoty: 70%, 75%, 80%, 85%, 90%, 95%, 97%.

^  # generací = 20  ^^^^^^^^
|  ^  70%  ^  75%  ^  80%  ^  85%  ^  90%  ^  95%  ^  97%  ^
^  # řešení  |  1.8  |  **3.7**  |  **3.4**  |  0.9  |  2.9  |  1.9  |  2.9  |

Ověříme víteze a otestujeme jejich okolní hodnoty

^  # generací = 20  ^^^^^^^^
|  ^  73%  ^  75%  ^  77%  ^  79%  ^  80%  ^  82%  ^
^  # řešení 1  |  1.2  |  0.3  |  **2.7**  |  **3.0**  |  1.6  |  2.5  |
^  # řešení 2  |  0.4  |  **4.4**  |  **2.7**  |  1.9  |  **2.6**  |  1.8  |
^  # řešení 3  |  2.1  |  **3.3**  |  3.0  |  1.4  |  **4.0**  |  1.3  |
^  průměr  |  1.23  |  **2.93**  |  2.8  |  2.1  |  **2.9**  |  1.87  |

Z výsledků měření lze vidět, že nejlepší průměrnou hodnotu má 75%, ale stabilnější výsledky prokazuje 80% (jelikož 75% má v prvním řešení 0.3). Tedy **nejvyhovující pravděpodobnost křížení je 80%**.

=== Druh křížení ===
Jednobodové a dvoubodové křížení vyměňují bity v určitém náhodném intervalu, další typy křížení vyměňují jednotlivé náhodné bity. Jelikož struktura proměnných žádným způsobem nepopisuje strukturu příslušného boolevského výrazu, lze předpokládat, že lepší výsledky budou mít druhy křížení, která vyměňují úplně náhodné bity (což odpovídá dvoubodovému a více křížení). Následující hodnoty byly otestovány: 1 (jednobodové), 2 (dvoubodové) a křížení jednotlivých náhodných 3 (6% od celkového počtu bitů - 50 bitů = 50 proměnných), 10 (20%), 20 (40%), 30 (60%), 40 (80%) bitů.

^  # generací = 20  ^^^^^^^^
|  ^  1  ^  2  ^  3  ^  10  ^  20  ^  30  ^  40  ^
^  # řešení 1  |  0.8  |  **2.1**  |  1.0  |  1.8  |  1.6  |  **2.6**  |  1.9  |
^  # řešení 2  |  **2.5**  |  1.6  |  **3.0**  |  2.0  |  1.4  |  0.4  |  1.7  |
^  # řešení 3  |  0.7  |  1.0  |  **2.7**  |  2.5  |  2.1  |  **4.4**  |  **2.7**  |
^  průměr  |  2.0  |  1.57  |  **2.23**  |  2.1  |  1.7  |  **2.47**  |  2.1  |

3-bodové a 30-bodové křížení mají skoro stejné výsledky, ale 3-bodové má stabilnější (0.4 u 30 ve druhém řešení). Tedy **nejvyhovující druh je tři-bodové křížení**.

==== Druh selekce rodičů ====
Aktuální implementace použitého modulu poskytuje 3 druhy selekce rodičů: //roulette wheel selection//, //rank wheel selection// a //tournament//. První druh není avšak moc užitečný, jelikož pravděpodobnost výběru rodiče je přímo úměrná hodnotě jeho //fitness//, což způsobuje rychlou konvergenci, ale za cenu ztráty divergence.

Musíme tedy rozhodnout o teprve dvou druhů: //rank wheel selection// (stručně //rank//) a //tournament//. Turnáj byl proveden přes celou populaci.

^  # generací = 20  ^^^
|  ^  rank  ^  tournament  ^
^  # řešení 1  |  0.2  |  **2.6**  |
^  # řešení 2  |  **0.5**  |  0.0  |
^  # řešení 3  |  0.5  |  **0.7**  |
^  # řešení 4  |  **0.5**  |  0.0  |
^  # řešení 5  |  **0.3**  |  0.0  |
^  průměr  |  0.4  |  **0.66**  |

Z výsledků je jasně vidět, že turnáj přes celou populaci je velmi nestabilní, ale //rank// má úplně opačné chování.

==== Velikost počateční populace ====
TODO

===== Výsledné optimální parametry =====
TODO

===== Výsledky =====
TODO

===== Závěr =====
TODO 